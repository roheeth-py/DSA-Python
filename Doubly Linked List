# Doubly linked list
# FUNCTIONS : 1.print forward 2.print backward
#             3.get last node 4.get length
#             5.insert at beginning 6.insert at end 7.insert with index
#             8.remove with index 9.insert values

class Node:
    def __init__(self, data = None, next = None, prev = None):
        self.data = data
        self.next = next
        self.prev = prev
class DoublyLinkedList:
    def __init__(self):
        self.head = None

    def print_forward(self):
        if self.head is None:
            print("List is empty")
            return
        llstr = ""
        itr = self.head
        while itr:
            llstr = llstr + str(itr.data) + "-->"
            itr = itr.next
        print(llstr)

    def print_backward(self):
        if self.head is None:
            print("List is empty")
            return
        llstr = ""
        itr = self.get_last_node()
        while itr:
            llstr = llstr + itr.data + "-->"
            itr = itr.prev
        print(llstr)

    def get_last_node(self):
        if self.head is None:
            return
        itr = self.head
        while itr.next:
            itr = itr.next
        return itr

    def get_length(self):
        count = 0
        itr = self.head
        while itr:
            count += 1
            itr = itr.next
        return count

    def insert_at_beginning(self, data):
        if self.head is None:
            node = Node(data, self.head, None)
            self.head = node
        else:
            node = Node(data, self.head, None)
            self.head.prev = node
            self.head = node
    def insert_at_end(self, data):
        if self.head is None:
            node = Node(data, None, None)
            self.head = node
            return 
        itr = self.head
        while itr.next:
            itr = itr.next
        itr.next = Node(data, None, itr)

    def insert_at(self, index, data):
        if index < 0 or index > self.get_length():
            raise Exception("Invalid Index")
        if index == 0:
            self.head = Node(data, self.head, None)
            return
        itr = self.head
        count = 0
        while itr:
            if count == index - 1:
                node = Node(data, itr.next, itr)
                if node.next:
                    node.next.prev = node
                itr.next = node
                break
            itr = itr.next
            count+=1

    def insert_values(self, dataList):
        itr = self.head
        for data in dataList:
            self.insert_at_end(data)

if __name__ == '__main__':
    ll = DoublyLinkedList()
    ll.insert_values(["banana","mango","grapes","orange"])
    ll.print_forward()
    ll.print_backward()
    ll.insert_at_end("figs")
    ll.print_forward()
    ll.insert_at(0,"jackfruit")
    ll.print_forward()
    ll.insert_at(6,"dates")
    ll.print_forward()
    ll.insert_at(2,"kiwi")
    ll.print_forward()
