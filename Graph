class Graph:
    def __init__(self, edges):
        self.edges = edges
        self.graph_dict = {}
        for start, end in self.edges:
            if start not in self.graph_dict:
                self.graph_dict[start] = [end]
            else:
                self.graph_dict[start].append(end)
        print(self.graph_dict)

    def find_path(self, start, end, path = []):
        path = path + [start]

        if start not in self.graph_dict:
            return []

        if start == end:
            return [path]

        paths = []
        for node in self.graph_dict[start]:
            if node not in path:
                new_path = self.find_path(node, end, path)
                for p in new_path:
                    paths.append(p)
        return paths

    def shortest_path(self, start, end, path = []):
        path = path + [start]

        if start == end:
            return path

        if start not in self.graph_dict:
            return None

        shortest_path = None
        for node in self.graph_dict[start]:
            if node not in path:
                sp = self.shortest_path(node, end, path)
                if sp:
                    if shortest_path is None or len(sp) < len(shortest_path):
                        shortest_path = sp

        return shortest_path


if __name__ == "__main__":
    routes = [
        ("Mumbai", "Paris"),
        ("Mumbai", "Dubai"),
        ("Paris", "Dubai"),
        ("Paris", "New York"),
        ("Dubai", "New York"),
        ("New York", "Toronto"),
    ]

    flight_paths = Graph(routes)

    start = "Mumbai"
    end = "New York"
    print()
    print(f"From {start} to {end} :", flight_paths.find_path(start, end))
    print()
    print(f"From {start} to {end} :", flight_paths.shortest_path(start, end))
