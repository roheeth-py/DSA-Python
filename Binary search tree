class BinarySearchTree:
    def __init__(self, data):
        self.data = data
        self.right = None
        self.left = None

    def add_child(self, child):
        if child == self.data:
            return
        if child < self.data:
            if self.left:
                self.left.add_child(child)
            else:
                self.left = BinarySearchTree(child)
        if child > self.data:
            if self.right:
                self.right.add_child(child)
            else:
                self.right = BinarySearchTree(child)

    def search(self, value):
        if self.data == value:
            return True
        if value < self.data:
            if self.left:
                return self.left.search(value)
        elif value > self.data:
            if self.right:
                return self.right.search(value)

    # ([17, 4, 1, 20, 9, 23, 18, 34])
    # [1, 4, 17]
    # [17, 20, 23, 34]
    def inorder_traversal(self):
        elements = []

        if self.left:
            elements += self.left.inorder_traversal()
        elements.append(self.data)
        if self.right:
            elements += self.right.inorder_traversal()

        return elements

    def preorder_traversal(self):pass

    def postorder_traversal(self):
        elements = []

        if self.left:
            elements += self.left.postorder_traversal()

        if self.right:
            elements += self.right.postorder_traversal()
        elements.append(self.data)

        return elements

    def calculate_sum(self):
        left_sum = self.left.calculate_sum() if self.left else 0
        right_sum = self.right.calculate_sum() if self.right else 0
        return self.data + left_sum + right_sum

    def delete(self, data):
        if self.data < data:
            if self.left:
                self.left.delete(data)
        elif self.data > data:
            if self.right:
                self.right.delete(data)
        else:
            if self.left is None and self.right is None:
                return None
            elif self.left is None:
                return self.right




def buildTree(element):

    root = BinarySearchTree(element[0])
    for i in range(1, len(element)):
        root.add_child(element[i])
    return root

if __name__ == "__main__":
    tree = buildTree([15, 12, 7, 14, 27, 20, 23, 88])
    print("Inorder Traversal :",tree.inorder_traversal())
    print("Postorder Traversal :",tree.postorder_traversal())
    print("search :",tree.search(7))
    print("Total :",tree.calculate_sum())
